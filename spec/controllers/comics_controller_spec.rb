require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ComicsController, type: :controller do
  before(:each) do
    request.accept = "application/json"
  end

  let(:valid_session) { {} }
  let(:valid_comic_data) {{is_published: false}}
  let(:invalid_comic_data) {{:non_comic_attribute => "no data"}}
  describe "GET #index" do

    it "does not assign unpublished comics as @comics" do
      comic = FactoryGirl.create(:comic, :is_published => false)
      get :index, {}, valid_session
      expect(assigns(:comics)).to eq([])
    end

    it "assigns all published comics as @comics" do
      comic = FactoryGirl.create(:comic, :is_published => true)
      get :index, {}, valid_session
      expect(assigns(:comics)).to eq([comic])
    end
  end

  describe "GET #show" do
    it "assigns the requested comic as @comic" do
      comic = FactoryGirl.create(:comic)
      get :show, {:id => comic.to_param}, valid_session
      expect(assigns(:comic)).to eq(comic)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Comic" do
        expect {
          post :create, format: :json, :comic => valid_comic_data
        }.to change(Comic, :count).by(1)
      end

      it "assigns a newly created comic as @comic" do
        post :create, format: :json, :comic => valid_comic_data
        expect(assigns(:comic)).to be_a(Comic)
        expect(assigns(:comic)).to be_persisted
      end

      it "respond with created response code" do
        post :create, format: :json, :comic => valid_comic_data
        expect(response).to have_http_status(:created)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {:is_published => true}
      }

      it "updates the requested comic" do
        comic = FactoryGirl.create(:comic)
        put :update, format: :json, :id => comic.id, :comic => new_attributes
        comic.reload
        expect(comic.is_published).to eq(true)
      end

      it "assigns the requested comic as @comic" do
        comic = FactoryGirl.create(:comic)
        put :update, format: :json, :id => comic.id, :comic => new_attributes
        expect(assigns(:comic)).to eq(comic)
      end

      it "respond with success response code" do
        comic = FactoryGirl.create(:comic)
        put :update, format: :json, :id => comic.id, :comic => new_attributes
        expect(response).to have_http_status(:ok)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested comic" do
      comic = FactoryGirl.create(:comic)
      expect {
        delete :destroy, {:id => comic.to_param}, valid_session
      }.to change(Comic, :count).by(-1)
    end

    it "return the no content status" do
      comic = FactoryGirl.create(:comic)
      delete :destroy, {:id => comic.to_param}, valid_session
      expect(response).to have_http_status(:no_content)
    end

    it "cascade the delete to the children stripes of a deleted comic" do
      stripe = FactoryGirl.create(:stripe)
      expect {
        delete :destroy, {:id => stripe.comic.to_param}, valid_session
      }.to change(Stripe, :count).by(-1)
    end
  end

end
