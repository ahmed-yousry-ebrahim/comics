require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe StripesController, type: :controller do

  before(:each) do
    request.accept = "application/json"
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # StripesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all stripes as @stripes" do
      stripe = FactoryGirl.create(:stripe)
      get :index, {:comic_id => stripe.comic.id}, valid_session
      expect(assigns(:stripes)).to eq([stripe])
    end
  end

  describe "GET #show" do
    it "assigns the requested stripe as @stripe" do
      stripe = FactoryGirl.create(:stripe)
      get :show, {:id => stripe.to_param, :comic_id => stripe.comic.id}, valid_session
      expect(assigns(:stripe)).to eq(stripe)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      let(:valid_attributes){
        image = FactoryGirl.create(:image,:ten_k_image)
        {:caption => "", :image => image}
      }
      it "creates a new Stripe" do
        comic = FactoryGirl.create(:comic)
        expect {
          post :create, format: :json, :comic_id => comic.id, :stripe => valid_attributes
        }.to change(Stripe, :count).by(1)
      end

      it "assigns a newly created stripe as @stripe" do
        comic = FactoryGirl.create(:comic)
        post :create, format: :json, :comic_id => comic.id, :stripe => valid_attributes
        expect(assigns(:stripe)).to be_a(Stripe)
        expect(assigns(:stripe)).to be_persisted
        expect(response).to have_http_status(:created)
      end

      it "automatically assign order" do
        stripe = FactoryGirl.create(:stripe)
        post :create, format: :json, :comic_id => stripe.comic.id, :stripe => valid_attributes
        expect(assigns(:stripe).order).to eq(stripe.order + 1)
      end

      it "doesn't allow more than 6 stripes per comic" do
        comic = FactoryGirl.create(:comic)
        for i in 1..6
          FactoryGirl.create(:stripe, :comic_id => comic.id)
        end
        post :create, format: :json, :comic_id => comic.id, :stripe => valid_attributes
        expect(response).to have_http_status(:unprocessable_entity)
      end

    end

    context "with invalid params" do
      let(:invalid_attributes){
        {:caption => ""}
      }
      it "assigns a newly created but unsaved stripe as @stripe" do
        comic = FactoryGirl.create(:comic)
        post :create, format: :json, :comic_id => comic.id, :stripe => invalid_attributes
        expect(assigns(:stripe)).to be_a_new(Stripe)
      end

      it "responds with error status code" do
        comic = FactoryGirl.create(:comic)
        post :create, format: :json, :comic_id => comic.id, :stripe => invalid_attributes
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {:caption => "new caption"}
      }

      it "updates the requested stripe" do
        stripe = FactoryGirl.create(:stripe)
        put :update, format: :json, :id => stripe.id, :comic_id => stripe.comic.id, :stripe => new_attributes
        stripe.reload
        expect(stripe.caption).to eq("new caption")
      end

      it "assigns the requested stripe as @stripe" do
        stripe = FactoryGirl.create(:stripe)
        put :update, format: :json, :id => stripe.id, :comic_id => stripe.comic.id, :stripe => new_attributes
        expect(assigns(:stripe)).to eq(stripe)
      end

      it "respond with success response code" do
        stripe = FactoryGirl.create(:stripe)
        put :update, format: :json, :id => stripe.id, :comic_id => stripe.comic.id, :stripe => new_attributes
        expect(response).to have_http_status(:ok)
      end

      it "raises an error when order is 0" do
        comic = FactoryGirl.create(:comic)
        stripe = FactoryGirl.create(:stripe, :comic_id => comic.id)
        put :update, format: :json, :id => stripe.id, :comic_id => comic.id, :stripe => {:order => 0}
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "raises an error when order is bigger than the number of stripes" do
        comic = FactoryGirl.create(:comic)
        stripe = FactoryGirl.create(:stripe, :comic_id => comic.id)
        comic.reload
        put :update, format: :json, :id => stripe.id, :comic_id => comic.id, :stripe => {:order => comic.stripes_count + 1}
        expect(response).to have_http_status(:unprocessable_entity)
      end

      it "maintain the stripes order" do
        comic = FactoryGirl.create(:comic)
        first_stripe = FactoryGirl.create(:stripe, :comic_id => comic.id)
        second_stripe = FactoryGirl.create(:stripe, :comic_id => comic.id)
        first_stripe_old_order = first_stripe.order
        second_stripe_old_order = second_stripe.order
        put :update, format: :json, :id => first_stripe.id, :comic_id => comic.id, :stripe => {:order => second_stripe.order}
        first_stripe.reload
        second_stripe.reload
        expect(first_stripe.order).to eq(second_stripe_old_order)
        expect(second_stripe.order).to eq(first_stripe_old_order)
      end
    end

    context "with invalid params" do
      let(:invalid_new_attributes) {
        {:caption => "new caption", :image => {}}
      }
      it "assigns the stripe as @stripe" do
        stripe = FactoryGirl.create(:stripe)
        put :update, format: :json, :id => stripe.id, :comic_id => stripe.comic.id, :stripe => invalid_new_attributes
        expect(assigns(:stripe)).to eq(stripe)
      end

      it "responds with error status code" do
        stripe = FactoryGirl.create(:stripe)
        put :update, format: :json, :id => stripe.id, :comic_id => stripe.comic.id, :stripe => invalid_new_attributes
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested stripe" do
      stripe = FactoryGirl.create(:stripe)
      expect {
        delete :destroy, :comic_id => stripe.comic.id, :id => stripe.to_param
      }.to change(Stripe, :count).by(-1)
    end

    it "redirects to the stripes list" do
      stripe = FactoryGirl.create(:stripe)
      delete :destroy, :comic_id => stripe.comic.id, :id => stripe.to_param
      expect(response).to have_http_status(:no_content)
    end

    it "maintain the order of comic stripes after deletion" do
      comic = FactoryGirl.create(:comic)
      first_stripe = FactoryGirl.create(:stripe, :comic_id => comic.id)
      second_stripe = FactoryGirl.create(:stripe, :comic_id => comic.id)
      third_stripe = FactoryGirl.create(:stripe, :comic_id => comic.id)
      delete :destroy, :comic_id => comic.id, :id => second_stripe.to_param
      first_stripe.reload
      third_stripe.reload
      expect(first_stripe.order).to eq(1)
      expect(third_stripe.order).to eq(2)
    end
  end

end
